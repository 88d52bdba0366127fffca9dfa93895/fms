.. _config:

=============================
FMS experiments configuration
=============================

FMS needs an experiment description to be able to run it. The experiment
configuration file contains this description.

The experiment configuration file name might be whatever you want (provided your
operating system allows it) but should have an '.yml' extension for FMS to know
how to parse it (other formats such as XML exist for compatibility reasons, even
if their use is discouraged).

This file is written in the YAML_ format, which is hopefully rather easy to
read and write. A minimal configuration file should contain three items with
their required parameters: world, engines/markets, agents.

.. _YAML: http://www.yaml.org/

Before going deeper in the nuts and bolts of the configuration file, you should
understand what world, engines, markets and agents mean in FMS's vocabulary.

The FMS model
=============

World
-----

This is a "global environment" class, providing agents with so called exogenous
information on request. Such information might typically be the level of
interest rates, or energy price, for an example. A ``NullWorld`` class is provided
with FMS, it does not provide any special information.

Engines/markets
---------------

The engines/markets tuples describe what you would simply call "the market" in
the real world. Engines are the "traffic controlers" : they give speak to the
agents in a (simulated) synchronous or asynchronous manner, choosing which
agents speak and when at will. For an example, FMS provides with an
AsynchronousRandWReplace engine class, which is asynchronous (market clearing is
required as soon as an agent spoke) and chooses agents randomly, with
replacement. Markets basically are responsible for recording the orders, and
doing the clearing (for an example, auction style "fixing" clearing once in a
while, or continuous book based clearing). FMS provides with two basic market
classes, ``ContinuousOrderDriven`` and ``HighestQtyFixing``.

Agents
------

Agents act when the engines give them speak. Acting is either do nothing, or
place an order. Order should at least have a direction (buy or sell) but may in
addition specify price and/or quantity. A ``ZeroIntelligenceTrader`` class is
provided: this agent takes fully random decisions.


Configuration file syntax
=========================

Configuration files are provides in the ``docs/examples/`` directory, it is
strongly recommanded to study those before writing your own.

A minimal configuration file might be::

    --- # Experiment

    world:
          classname: NullWorld

    engines:
        - classname: AsynchronousRandWReplace
          market:
              classname: ContinuousOrderDriven

    agents:
        - classname: ZeroIntelligenceTrader
          number: 1000
          money: 5000
          stocks: 1000

An FMS YAML configuration file should contain one and only one YAML *document*,
i.e. only one section delimited by ``---``. The parameters it describes are as
follows:  
 
outputfilename 
    Name of transactions output file (optional)

    The name of the file to which the transactions resulting from the experiment
    should be output. This file is a comma separated values one, suitable for
    use in whatever processing you need afterwards. The transactions are output
    to the console if this parameter is missing.

orderslogfilename
    Name of order log file (optional)

    The name of the file to which the different orders generated by the agents
    are saved in a chronological manner. This file is a comma separated values
    one, and is necessary to replay an experiment, for an example. If this
    parameter is missing, the orders are not saved.

randomseed
    Seed of the pseudo-ramdom numbers generator (optional)

    As some agents take random decisions, and some engines randomly choose the
    agents allowed to speak, a random generator is sometimes needed. FMS uses
    Python's random library, which uses the Mersenne Twister as the core
    generator (see http://docs.python.org/library/random.html for more about
    this).  As this library accepts an optional seed parameter, you may specify
    it here.

world
    World class information (required)

    Parameters describing the World class to use in this experiment:

    classname
        World class name (required)

        The name of the world class to use. The class source should be in a
        module named after the class, in all lowercase chars, with a '.py'
        extension, located in the ``fms/worlds/`` directory.

        args
        World class arguments (optional)

        Any arguments required by or optional to the world class.

engines
    Engine classes information (required)

    Parameters describing the Engine classes to use in this experiment. The
    experiment might use multiple engines, one after the other, thus the list
    syntax is required for the classname arguments (that is, they should be
    preceded by a dash, see the examples).

    classname
        Engine class name (at least one required)

        The name of the engine class to use. The class source should be in a
        module named after the class, in all lowercase chars, with a '.py'
        extension, located in the ``fms/engines/`` directory.

    market
        Market class information (required)

        Parameters describing the Market class associated with this Engine class:

        classname
            Market class name (required)

            The name of the market class to use. The class source should be in a
            module named after the class, in all lowercase chars, with a '.py'
            extension, located in the ``fms/markets/`` directory.  .RE

        args
            Market class arguments (optional)

            Any arguments required by or optional to the market class.

    days
        Number of days (optional, integer)

        The number of days the experiment will run, as an integer. See daylength
        below. Days is set to one if missing.

    daylength
        Day length (optional, integer)

        The number or times the engine will choose an agent and let her speak on
        the market, per day, as an integer. The daylength is set to one if
        missing.  The engine will thus loop 'days times daylength' times before
        stopping.

    args
        Engine class arguments (optional)

        Any arguments required by or optional to the engine class.

agents
    Agents classes information (required)

    Parameters describing the Agent classes to use in this experiment. The
    experiment might use multiple agents classes, one after the other, thus the
    list syntax is required for the classname arguments (that is, they should be
    preceded by a dash, see the examples).

    classname
        Agent class name (at least one required)

        The name of the agent class to use. The class source should be in a
        module named after the class, in all lowercase chars, with a '.py'
        extension, located in the ``fms/agents/`` directory.

    number
        Number of agents instances (required)

        The number of agent instances of this class on the market as an integer.
        Especially useful if you want to mix agents classes on the market (e.g.
        informed and non-informed) in given proportions.

    money
        Initial endowment of the agent (required)

        The money the agent owns for investing when the experiment starts, as a
        float.  This parameter might be used (or not) in the agent class, to
        check that the agents is able to pay for the orders she puts, for an
        example.

    stocks
        Initial number of stocks in the agent's portfolio (required)

        The number of stocks the agent owns when the experiment starts, as an
        integer.  This parameter might be used (or not) in the agent class, to
        check for shortselling, for an example.

    args
        Agent class arguments (optional)

        Any arguments required by or optional to the agent class.

